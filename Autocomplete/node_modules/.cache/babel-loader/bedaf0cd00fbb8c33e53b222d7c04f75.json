{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sreerag\\\\Desktop\\\\Converj\\\\React\\\\Autocomplete\\\\src\\\\Autocomplete.js\";\nimport React, { Component, Fragment } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Autocomplete extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClickButton = e => {\n      console.log(\"conformedSuggestionButton: \" + this.state.userInput);\n    };\n\n    this.onChange = e => {\n      const {\n        suggestions\n      } = this.props;\n      const userInput = e.currentTarget.value;\n      var inputArray = userInput.split(\" \");\n      var searchTerm = inputArray[inputArray.length - 1];\n\n      if (this.state.conformedSuggestion.length > userInput.length) {\n        this.setState({\n          conformedSuggestion: userInput\n        });\n      } // Filter our suggestions that don't contain the user's input\n\n\n      const filteredSuggestions = suggestions.filter(suggestion => suggestion.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1);\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions,\n        showSuggestions: true,\n        userInput: e.currentTarget.value\n      });\n    };\n\n    this.onClick = e => {\n      var val;\n\n      if (this.state.conformedSuggestion.length === 0) {\n        val = \"\";\n      } else {\n        val = this.state.conformedSuggestion + \" \";\n      }\n\n      var value = val + e.currentTarget.innerText;\n      this.setState({\n        conformedSuggestion: val + e.currentTarget.innerText\n      });\n      this.setState({\n        activeSuggestion: 0,\n        filteredSuggestions: [],\n        showSuggestions: false,\n        userInput: value\n      });\n      console.log(\"conformedSuggestion: \" + this.state.conformedSuggestion);\n      console.log(\"user input: \" + this.state.userInput);\n    };\n\n    this.onKeyDown = e => {\n      const {\n        activeSuggestion,\n        filteredSuggestions\n      } = this.state; // User pressed the enter key\n\n      if (e.keyCode === 13) {\n        var val;\n\n        if (this.state.conformedSuggestion.length === 0) {\n          val = \"\";\n        } else {\n          val = this.state.conformedSuggestion + \" \";\n        }\n\n        var value = val + filteredSuggestions[activeSuggestion];\n        this.setState({\n          conformedSuggestion: val + filteredSuggestions[activeSuggestion]\n        });\n        this.setState({\n          activeSuggestion: 0,\n          showSuggestions: false,\n          userInput: value\n        });\n        console.log(\"conformedSuggestion: \" + this.state.conformedSuggestion);\n      } // User pressed the up arrow\n      else if (e.keyCode === 38) {\n        if (activeSuggestion === 0) {\n          return;\n        }\n\n        this.setState({\n          activeSuggestion: activeSuggestion - 1\n        });\n      } // User pressed the down arrow\n      else if (e.keyCode === 40) {\n        if (activeSuggestion - 1 === filteredSuggestions.length) {\n          return;\n        }\n\n        this.setState({\n          activeSuggestion: activeSuggestion + 1\n        });\n      }\n    };\n\n    this.state = {\n      // The active selection's index\n      activeSuggestion: 0,\n      // The suggestions that match the user's input\n      filteredSuggestions: [],\n      conformedSuggestion: \"\",\n      // Whether or not the suggestion list is shown\n      showSuggestions: false,\n      // What the user has entered\n      userInput: \"\",\n      currentInput: \"\"\n    };\n  }\n\n  render() {\n    const {\n      onChange,\n      onClick,\n      onKeyDown,\n      onClickButton,\n      state: {\n        activeSuggestion,\n        filteredSuggestions,\n        showSuggestions,\n        userInput\n      }\n    } = this;\n    let suggestionsListComponent;\n\n    if (showSuggestions && userInput) {\n      if (filteredSuggestions.length) {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"suggestions\",\n          children: filteredSuggestions.map((suggestion, index) => {\n            let className; // Flag the active suggestion with a class\n\n            if (index === activeSuggestion) {\n              className = \"suggestion-active\";\n            }\n\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              className: className,\n              onClick: onClick,\n              children: suggestion\n            }, suggestion, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this);\n      } else {\n        suggestionsListComponent = /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-suggestions\",\n          children: /*#__PURE__*/_jsxDEV(\"em\", {\n            children: \"No suggestions, you're on your own!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this);\n      }\n    }\n\n    return /*#__PURE__*/_jsxDEV(Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: onChange,\n        onKeyDown: onKeyDown,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), suggestionsListComponent, /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: onClickButton,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nAutocomplete.propTypes = {\n  suggestions: PropTypes.instanceOf(Array)\n};\nAutocomplete.defaultProps = {\n  suggestions: []\n};\nexport default Autocomplete;","map":{"version":3,"sources":["C:/Users/Sreerag/Desktop/Converj/React/Autocomplete/src/Autocomplete.js"],"names":["React","Component","Fragment","PropTypes","Autocomplete","constructor","props","onClickButton","e","console","log","state","userInput","onChange","suggestions","currentTarget","value","inputArray","split","searchTerm","length","conformedSuggestion","setState","filteredSuggestions","filter","suggestion","toLowerCase","indexOf","activeSuggestion","showSuggestions","onClick","val","innerText","onKeyDown","keyCode","currentInput","render","suggestionsListComponent","map","index","className","propTypes","instanceOf","Array","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Autocomplete extends Component {\r\n  static propTypes = {\r\n    suggestions: PropTypes.instanceOf(Array),\r\n  };\r\n\r\n  static defaultProps = {\r\n    suggestions: [],\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      // The active selection's index\r\n      activeSuggestion: 0,\r\n      // The suggestions that match the user's input\r\n      filteredSuggestions: [],\r\n      conformedSuggestion: \"\",\r\n      // Whether or not the suggestion list is shown\r\n      showSuggestions: false,\r\n      // What the user has entered\r\n      userInput: \"\",\r\n      currentInput: \"\",\r\n    };\r\n  }\r\n  onClickButton = (e) => {\r\n    console.log(\"conformedSuggestionButton: \" + this.state.userInput);\r\n  };\r\n  onChange = (e) => {\r\n    const { suggestions } = this.props;\r\n    const userInput = e.currentTarget.value;\r\n    var inputArray = userInput.split(\" \");\r\n    var searchTerm = inputArray[inputArray.length - 1];\r\n    if (this.state.conformedSuggestion.length > userInput.length) {\r\n      this.setState({ conformedSuggestion: userInput });\r\n    }\r\n\r\n    // Filter our suggestions that don't contain the user's input\r\n    const filteredSuggestions = suggestions.filter(\r\n      (suggestion) =>\r\n        suggestion.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\r\n    );\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions,\r\n      showSuggestions: true,\r\n      userInput: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  onClick = (e) => {\r\n    var val;\r\n\r\n    if (this.state.conformedSuggestion.length === 0) {\r\n      val = \"\";\r\n    } else {\r\n      val = this.state.conformedSuggestion + \" \";\r\n    }\r\n    var value = val + e.currentTarget.innerText;\r\n    this.setState({\r\n      conformedSuggestion: val + e.currentTarget.innerText,\r\n    });\r\n\r\n    this.setState({\r\n      activeSuggestion: 0,\r\n      filteredSuggestions: [],\r\n      showSuggestions: false,\r\n      userInput: value,\r\n    });\r\n\r\n    console.log(\"conformedSuggestion: \" + this.state.conformedSuggestion);\r\n    console.log(\"user input: \" + this.state.userInput);\r\n  };\r\n\r\n  onKeyDown = (e) => {\r\n    const { activeSuggestion, filteredSuggestions } = this.state;\r\n\r\n    // User pressed the enter key\r\n    if (e.keyCode === 13) {\r\n      var val;\r\n      if (this.state.conformedSuggestion.length === 0) {\r\n        val = \"\";\r\n      } else {\r\n        val = this.state.conformedSuggestion + \" \";\r\n      }\r\n      var value = val + filteredSuggestions[activeSuggestion];\r\n      this.setState({\r\n        conformedSuggestion: val + filteredSuggestions[activeSuggestion],\r\n      });\r\n      this.setState({\r\n        activeSuggestion: 0,\r\n        showSuggestions: false,\r\n        userInput: value,\r\n      });\r\n      console.log(\"conformedSuggestion: \" + this.state.conformedSuggestion);\r\n    }\r\n    // User pressed the up arrow\r\n    else if (e.keyCode === 38) {\r\n      if (activeSuggestion === 0) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion - 1 });\r\n    }\r\n    // User pressed the down arrow\r\n    else if (e.keyCode === 40) {\r\n      if (activeSuggestion - 1 === filteredSuggestions.length) {\r\n        return;\r\n      }\r\n\r\n      this.setState({ activeSuggestion: activeSuggestion + 1 });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      onChange,\r\n      onClick,\r\n      onKeyDown,\r\n      onClickButton,\r\n      state: {\r\n        activeSuggestion,\r\n        filteredSuggestions,\r\n        showSuggestions,\r\n        userInput,\r\n      },\r\n    } = this;\r\n\r\n    let suggestionsListComponent;\r\n\r\n    if (showSuggestions && userInput) {\r\n      if (filteredSuggestions.length) {\r\n        suggestionsListComponent = (\r\n          <ul className=\"suggestions\">\r\n            {filteredSuggestions.map((suggestion, index) => {\r\n              let className;\r\n\r\n              // Flag the active suggestion with a class\r\n              if (index === activeSuggestion) {\r\n                className = \"suggestion-active\";\r\n              }\r\n\r\n              return (\r\n                <li className={className} key={suggestion} onClick={onClick}>\r\n                  {suggestion}\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n        );\r\n      } else {\r\n        suggestionsListComponent = (\r\n          <div className=\"no-suggestions\">\r\n            <em>No suggestions, you're on your own!</em>\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Fragment>\r\n        <input\r\n          type=\"text\"\r\n          onChange={onChange}\r\n          onKeyDown={onKeyDown}\r\n          value={userInput}\r\n        />\r\n        {suggestionsListComponent}\r\n        <button type=\"button\" onClick={onClickButton}>\r\n          Submit\r\n        </button>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Autocomplete;\r\n"]},"metadata":{},"sourceType":"module"}